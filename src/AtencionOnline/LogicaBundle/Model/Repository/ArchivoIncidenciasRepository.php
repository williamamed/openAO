<?php

namespace AtencionOnline\LogicaBundle\Model\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArchivoIncidenciasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArchivoIncidenciasRepository extends EntityRepository
{
    /**
     * Retorna la cantidad de incidencias por estructuras de forma recursiva
     * @param string $estructures
     * @return int
     */
    public function getIncidenciasSize($estructures) {
       
        $query= $this->getEntityManager()->createQuery('SELECT COUNT(i.id) FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1)');
        $query->setParameter(1,$estructures);
        $count=$query->getSingleScalarResult();
        
        return $count;
    }
    /**
     * Retorna las incidencias por estructuras paginadas
     * @param string $estructures
     * @param int $start
     * @param int $cant
     * @return Incidencias[]
     */
    public function getIncidenciasPaging($estructures,$start, $cant) {
        
        $query= $this->getEntityManager()->createQuery('SELECT i FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1) order by i.fecha desc');
        
        $query->setParameter(1,$estructures);
        $query->setMaxResults($cant);
        $query->setFirstResult($start);
        
        return $query->getResult();
    }
    /**
     * Retorna las incidencias de una estructura de acuerdo al criterio pasado por
     * 
     * parametro
     * los criterios son
     * nombre
     * recibida
     * dirigido
     * desde (fecha de inicio)
     * hasta (fecha de fin)
     * via
     * tipo
     * 
     * @param string $estructures
     * @param array $criteria
     * @return Incidencias[]
     */
    public function getIncidenciasSearch($estructures,$criteria) {
        $rest1='';
        if($criteria['nombre']){
            $criteria['nombre']="%".$criteria['nombre']."%";
            $rest1.=' and  i.nombreApellidos LIKE :nombre';
        }else
            unset($criteria['nombre']);
        if($criteria['recibida']){
            $criteria['recibida']="%".$criteria['recibida']."%";
            $rest1.=' and i.recibe LIKE :recibida';
        }else
            unset($criteria['recibida']);
        if($criteria['dirigido']){
            $criteria['dirigido']="%".$criteria['dirigido']."%";
            $rest1.=' and i.dirigido LIKE :dirigido ';
        }else
            unset($criteria['dirigido']);
        $rest='';
        if($criteria['via']){
            $rest.=' and i.idViasComunicacion=:via';
        }
        if($criteria['tipo']){
            $rest.=' and i.idTipo=:tipo';
        }
        if($criteria['desde'] and $criteria['hasta']){
            $rest.=' and i.fecha BETWEEN :desde AND :hasta';
        }
        
        $query= $this->getEntityManager()->createQuery('SELECT i FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE  i.idEstructure IN (:estructures) '.$rest1.'  '.$rest.'  order by i.fecha desc');
        $query->setParameter('estructures',$estructures);
        foreach ($criteria as $key => $value) {
            if($value)
                $query->setParameter($key,$value);
        }
        
        return $query->getResult();
    }
    
    /**
     * Retorna las vias de comunicacion y sus cantidades
     * @param string $estructures
     * @return type
     */
    public function getViasChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT v.nombre as name , COUNT(i.id) as cant FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i , AtencionOnline\LogicaBundle\Model\Entity\ViasComunicacion  v  WHERE i.idEstructure IN (?1) and i.idViasComunicacion=v.id and i.fecha BETWEEN ?2 and ?3 GROUP BY i.idViasComunicacion');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        return $query->getResult();
    }
    
    /**
     * Retorna las vias de comunicacion y sus cantidades
     * @param string $estructures
     * @return type
     */
    public function getValoracionChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT v.nombre as name , COUNT(i.id) as cant, i.razon as razon FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i , AtencionOnline\LogicaBundle\Model\Entity\Tipo  v  WHERE i.idEstructure IN (?1) and i.idTipo=v.id and v.nombre=?4 and i.fecha BETWEEN ?2 and ?3 GROUP BY i.razon');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        $query->setParameter(4,'Queja');
        return $query->getResult();
    }
    
    /**
     * Retorna las vias de comunicacion y sus cantidades
     * @param string $estructures
     * @return type
     */
    public function getValoracionConformidadChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT v.nombre as name , COUNT(i.id) as cant, i.conforme as conforme FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i , AtencionOnline\LogicaBundle\Model\Entity\Tipo  v  WHERE i.idEstructure IN (?1) and i.idTipo=v.id and v.nombre=?4 and i.fecha BETWEEN ?2 and ?3 GROUP BY i.conforme');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        $query->setParameter(4,'Queja');
        return $query->getResult();
    }
    
    /**
     * Retorna los tipos y sus cantidades
     * @param string $estructures
     * @return type
     */
    public function getTipoChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT v.nombre as name , COUNT(i.id) as cant FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i , AtencionOnline\LogicaBundle\Model\Entity\Tipo  v  WHERE i.idEstructure IN (?1) and i.idTipo=v.id and i.fecha BETWEEN ?2 and ?3 GROUP BY i.idTipo');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        return $query->getResult();
    }
    
    /**
     * Retorna las estructuras y sus cantidades
     * @param string $estructures
     * @return int
     */
    public function getEstructureChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT t.nombre as name , COUNT(i.id) as cant FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i,AtencionOnline\LogicaBundle\Model\Entity\Tipo t WHERE i.idEstructure IN (?1) and i.idTipo=t.id and i.fecha BETWEEN ?2 and ?3 GROUP BY t.id');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        return $query->getResult();
    }
    
    /**
     * Retorna las cantidades de incidencias por tipo
     * @param string $estructures
     * @return int
     */
    public function getEstructureByTipoChart($estructures,$desde,$hasta,$tipo) {
        
        $query= $this->getEntityManager()->createQuery('SELECT COUNT(i.id) FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1)  and i.fecha BETWEEN ?2 and ?3 and i.idTipo=?4');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        $query->setParameter(4,$tipo);
        return $query->getSingleScalarResult();
    }
    /**
     * Retorna las cantidades de incidencias por vias
     * @param string $estructures
     * @return int
     */
    public function getEstructureByViasChart($estructures,$desde,$hasta,$via) {
        
        $query= $this->getEntityManager()->createQuery('SELECT COUNT(i.id) FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1)  and i.fecha BETWEEN ?2 and ?3 and i.idViasComunicacion=?4');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        $query->setParameter(4,$via);
        return $query->getSingleScalarResult();
    }
    /**
     * Retorna las cantidades de incidencias por clasificador
     * @param string $estructures
     * @return int
     */
    public function getIncidenciasByClasificadorChart($estructures,$desde,$hasta,$clasificador) {
        
        $query= $this->getEntityManager()->createQuery('SELECT COUNT(i.id) FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1)  and i.fecha BETWEEN ?2 and ?3 and i.idClasificador IN (?4)');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        $query->setParameter(4,$clasificador);
        return $query->getSingleScalarResult();
    }
    
    /**
     * Retorna las cantidades de incidencias por estructura
     * @param string $estructures
     * @return int
     */
    public function getIncidenciasChart($estructures,$desde,$hasta) {
        
        $query= $this->getEntityManager()->createQuery('SELECT COUNT(i.id) FROM AtencionOnline\LogicaBundle\Model\Entity\ArchivoIncidencias i WHERE i.idEstructure IN (?1)  and i.fecha BETWEEN ?2 and ?3');
        
        $query->setParameter(1,$estructures);
        $query->setParameter(2,$desde);
        $query->setParameter(3,$hasta);
        
        return $query->getSingleScalarResult();
    }
    
    
}