<?php
/**
 * Generated by Raptor
 * You can add a route prefix to this bundle
 * puting a @Route("_") annotation to this class.
 * In this class you need to register your Bundle Aspects and your Rules for routes executions
 */
namespace Raptor2\SyntarsusBundle;
use Raptor\Bundle\Annotations\Route;
use Raptor\Bundle\Bundle;
use Go\Core\AspectContainer;
use Raptor\Raptor;
use Raptor\Bundle\Route\RuleContainer;

/**
 * 
 */
class SyntarsusBundle extends Bundle{
    /**
     * How many attempts of login
     * (By default 5 attempts)
     */
    const ATTEMPTS=5;
    /**
     * How many seconds of locking after the login attempts
     * (By default 20 minutes)
     */
    const LOCKTIME=1200;

    public function registerBundleAspect(AspectContainer $appAspectContainer) {

    }

    public function entrance(Raptor $app) {
        
    }

    public function registerRouteRule(RuleContainer $ruleContainer) {
        /**
         * SAML Login Service
         */
        $ruleContainer->add('/service/syntarsus/login', new Manager\SamlLoginResponse(),9);
        $ruleContainer->add('/service/syntarsus/login/handler', new Manager\SamlLoginHandler(),9);
        /**
         * Protect the Security Interfaces with Syntarsus
         */
        $ruleContainer->add('/syntarsus[\/\w]*', $this->app->getSecurity()->getManager(),9);
        /**
         * Syntarsus plugin to main Raptor panel
         */
        $ruleContainer->add('/raptor/',new Plugin\Panel(),9);
        $ruleContainer->addGuia(new Tutorials\Guia());
        $this->app->getInyector()->add($this->app->getSecurity()->getManager());
        $this->app->getInyector()->add(new Controller\API\SyntarsusServiceController());
    }
    
    public function configure() {
        /**
         * Register the Security manager for this App
         * In this case Syntarsus
         */
        $this->app->getSecurity()->setManager(new Manager\SecurityManager());
        $this->app->getSecurity()->getManager()
                ->setApp($this->app)
                ->auditory();
    }
    
    /**
     * Check if the current user has access to the passed id estructure
     * @param number $id
     * @return boolean
     */
    static public function evac($id) {
        return Raptor::getInstance()->getSecurity()->getManager()->Evac($id);
    }
    /**
     * Check if the current user has access to the passed id estructure
     * and throw an exception if not
     * @param number $id
     * @return boolean
     */
    static public function evacFlow($id) {
        return Raptor::getInstance()->getSecurity()->getManager()->EvacFlow($id);
    }
    
    static public function evacFree() {
       Raptor::getInstance()->getSecurity()->getManager()->freeEvac();
    }
    
    static public function evacActive() {
       Raptor::getInstance()->getSecurity()->getManager()->activeEvac();
    }

}

?>