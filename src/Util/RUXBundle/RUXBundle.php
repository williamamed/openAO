<?php

/**
 * Generated by Raptor
 * You can add a route prefix to this bundle
 * puting a @Route annotation to this class.
 * In this class you need to register your Bundle Aspects and your Rules for routes executions
 */

namespace Util\RUXBundle;

use Raptor\Bundle\Annotations\Route;

use Raptor\Bundle\Bundle;
use Go\Core\AspectContainer;
use Raptor\Raptor;
use Raptor\Bundle\Route\RuleContainer;

/**
 * @Route("")
 */
class RUXBundle extends Bundle {

    static private $rux = null;
    static private $template = '';
    static private $route = 'rux';
            
    public function registerBundleAspect(AspectContainer $appAspectContainer) {
        
    }

    public function entrance(Raptor $app) {
        if($this->app->router()->getCurrentRoute()->getParam('system')!=self::$route)
            $this->app->notFound ();
        
        if (!$app->getSecurity()->isAuthenticated()) {
            if ($this->app->getSecurity()->getManager()) {
                $refl = new \ReflectionClass($this->app->getSecurity()->getManager());
                if ($refl->getName() == 'Raptor2\SyntarsusBundle\Manager\SecurityManager')
                    $app->halt(401, 'Acceso no autorizado, esta funcionalidad debe utilizarse esclusivamente con el modulo de seguridad Syntarsus que aparentemente no se encuentra instalado');
            }
        }
    }

    public function registerRouteRule(RuleContainer $ruleContainer) {
        if ($this->app->getSecurity()->getManager()) {
            $refl = new \ReflectionClass($this->app->getSecurity()->getManager());
            if ($refl->getName() == 'Raptor2\SyntarsusBundle\Manager\SecurityManager')
                self::protectRoute ('/rux[\/\w]*');
        }
    }

    /**
     * Inyecta contenido en el punto establecido para la ruta /rux/home
     * @param string $hotpot
     * @param string $content
     */
    static public function addViewPlugin($hotpot, $content,$route='/rux/home[\/\w]*') {
        $app = Raptor::getInstance();
        if (static::$rux == null)
            static::$rux = new RUXBundle();

        $app->any($route, array(static::$rux, 'addHotPot'))->setParams(array($app, $hotpot, $content));
    }

    /**
     * Inyecta contenido en el punto establecido para la ruta /rux/home
     * @param string $hotpot
     * @param string $content
     */
    static public function addProfileViewPlugin($hotpot, $content,$route='/rux/profile[\/\w]*') {
        $app = Raptor::getInstance();
        if (static::$rux == null)
            static::$rux = new RUXBundle();

        $app->any($route, array(static::$rux, 'addHotPot'))->setParams(array($app, $hotpot, $content));
    }
    
    /**
     * Protege la ruta pasada por parametro y opcionalmente se puede establecer una ventana de
     * login personalizada
     * @param string $hotpot
     * @param string $content
     */
    static public function protectRoute($route,$template='') {
        $app = Raptor::getInstance();
        $app->getRuleContainer()->add($route, $app->getSecurity()->getManager());
        //$app->getRuleContainer()->add($route, new Rule\PluginCustomLogin($template?$template:self::$template),10);
    }

    public function addHotPot(Raptor $app, $hotpot, $content) {
        $data=$content;
        if(is_callable($content))
           $data=call_user_func_array($content, array($app));
        $app->setViewPlugin($hotpot, $data);
        return false;
    }
    
    /**
     * Establece una plantilla por defecto para la ventana de login
     * @param string $hotpot
     * @param string $content
     */
    static public function configureTemplate($template) {
        static::$template = $template;
    }
    
    static public function setName($route) {
        static::$route = $route;
    }
    
    static public function getName() {
        return static::$route;
    }

}

?>